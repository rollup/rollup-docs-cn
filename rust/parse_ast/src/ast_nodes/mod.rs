pub(crate) mod array_expression;
pub(crate) mod array_pattern;
pub(crate) mod arrow_function_expression;
pub(crate) mod assignment_expression;
pub(crate) mod assignment_pattern;
pub(crate) mod await_expression;
pub(crate) mod binary_expression;
pub(crate) mod block_statement;
pub(crate) mod break_statement;
pub(crate) mod call_expression;
pub(crate) mod catch_clause;
pub(crate) mod chain_expression;
pub(crate) mod class_body;
pub(crate) mod class_declaration;
pub(crate) mod class_expression;
pub(crate) mod conditional_expression;
pub(crate) mod continue_statement;
pub(crate) mod debugger_statement;
pub(crate) mod decorator;
pub(crate) mod directive;
pub(crate) mod do_while_statement;
pub(crate) mod empty_statement;
pub(crate) mod export_all_declaration;
pub(crate) mod export_default_declaration;
pub(crate) mod export_named_declaration;
pub(crate) mod export_specifier;
pub(crate) mod expression_statement;
pub(crate) mod for_in_statement;
pub(crate) mod for_of_statement;
pub(crate) mod for_statement;
pub(crate) mod function_declaration;
pub(crate) mod function_expression;
pub(crate) mod identifier;
pub(crate) mod if_statement;
pub(crate) mod import_attribute;
pub(crate) mod import_declaration;
pub(crate) mod import_default_specifier;
pub(crate) mod import_expression;
pub(crate) mod import_namespace_specifier;
pub(crate) mod import_specifier;
pub(crate) mod jsx_attribute;
pub(crate) mod jsx_closing_element;
pub(crate) mod jsx_closing_fragment;
pub(crate) mod jsx_element;
pub(crate) mod jsx_empty_expression;
pub(crate) mod jsx_expression_container;
pub(crate) mod jsx_fragment;
pub(crate) mod jsx_identifier;
pub(crate) mod jsx_member_expression;
pub(crate) mod jsx_namespaced_name;
pub(crate) mod jsx_opening_element;
pub(crate) mod jsx_opening_fragment;
pub(crate) mod jsx_spread_attribute;
pub(crate) mod jsx_spread_child;
pub(crate) mod jsx_text;
pub(crate) mod labeled_statement;
pub(crate) mod literal_big_int;
pub(crate) mod literal_boolean;
pub(crate) mod literal_null;
pub(crate) mod literal_number;
pub(crate) mod literal_reg_exp;
pub(crate) mod literal_string;
pub(crate) mod logical_expression;
pub(crate) mod member_expression;
pub(crate) mod meta_property;
pub(crate) mod method_definition;
pub(crate) mod new_expression;
pub(crate) mod object_expression;
pub(crate) mod object_pattern;
pub(crate) mod panic_error;
pub(crate) mod parse_error;
pub(crate) mod private_identifier;
pub(crate) mod program;
pub(crate) mod property;
pub(crate) mod property_definition;
pub(crate) mod rest_element;
pub(crate) mod return_statement;
pub(crate) mod sequence_expression;
pub(crate) mod shared;
pub(crate) mod spread_element;
pub(crate) mod static_block;
pub(crate) mod super_element;
pub(crate) mod switch_case;
pub(crate) mod switch_statement;
pub(crate) mod tagged_template_expression;
pub(crate) mod template_element;
pub(crate) mod template_literal;
pub(crate) mod this_expression;
pub(crate) mod throw_statement;
pub(crate) mod try_statement;
pub(crate) mod unary_expression;
pub(crate) mod update_expression;
pub(crate) mod variable_declaration;
pub(crate) mod variable_declarator;
pub(crate) mod while_statement;
pub(crate) mod yield_expression;
